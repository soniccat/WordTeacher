// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.2
// source: service_cardsets/grpc/cardsets.proto

package cardsets

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CardSetsClient is the client API for CardSets service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CardSetsClient interface {
	GetCardSets(ctx context.Context, in *GetCardSetsIn, opts ...grpc.CallOption) (CardSets_GetCardSetsClient, error)
	GetCardSetById(ctx context.Context, in *GetCardSetIn, opts ...grpc.CallOption) (*GetCardSetOut, error)
}

type cardSetsClient struct {
	cc grpc.ClientConnInterface
}

func NewCardSetsClient(cc grpc.ClientConnInterface) CardSetsClient {
	return &cardSetsClient{cc}
}

func (c *cardSetsClient) GetCardSets(ctx context.Context, in *GetCardSetsIn, opts ...grpc.CallOption) (CardSets_GetCardSetsClient, error) {
	stream, err := c.cc.NewStream(ctx, &CardSets_ServiceDesc.Streams[0], "/cardsets.CardSets/GetCardSets", opts...)
	if err != nil {
		return nil, err
	}
	x := &cardSetsGetCardSetsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CardSets_GetCardSetsClient interface {
	Recv() (*CardSet, error)
	grpc.ClientStream
}

type cardSetsGetCardSetsClient struct {
	grpc.ClientStream
}

func (x *cardSetsGetCardSetsClient) Recv() (*CardSet, error) {
	m := new(CardSet)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cardSetsClient) GetCardSetById(ctx context.Context, in *GetCardSetIn, opts ...grpc.CallOption) (*GetCardSetOut, error) {
	out := new(GetCardSetOut)
	err := c.cc.Invoke(ctx, "/cardsets.CardSets/GetCardSetById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CardSetsServer is the server API for CardSets service.
// All implementations must embed UnimplementedCardSetsServer
// for forward compatibility
type CardSetsServer interface {
	GetCardSets(*GetCardSetsIn, CardSets_GetCardSetsServer) error
	GetCardSetById(context.Context, *GetCardSetIn) (*GetCardSetOut, error)
	mustEmbedUnimplementedCardSetsServer()
}

// UnimplementedCardSetsServer must be embedded to have forward compatible implementations.
type UnimplementedCardSetsServer struct {
}

func (UnimplementedCardSetsServer) GetCardSets(*GetCardSetsIn, CardSets_GetCardSetsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetCardSets not implemented")
}
func (UnimplementedCardSetsServer) GetCardSetById(context.Context, *GetCardSetIn) (*GetCardSetOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCardSetById not implemented")
}
func (UnimplementedCardSetsServer) mustEmbedUnimplementedCardSetsServer() {}

// UnsafeCardSetsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CardSetsServer will
// result in compilation errors.
type UnsafeCardSetsServer interface {
	mustEmbedUnimplementedCardSetsServer()
}

func RegisterCardSetsServer(s grpc.ServiceRegistrar, srv CardSetsServer) {
	s.RegisterService(&CardSets_ServiceDesc, srv)
}

func _CardSets_GetCardSets_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetCardSetsIn)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CardSetsServer).GetCardSets(m, &cardSetsGetCardSetsServer{stream})
}

type CardSets_GetCardSetsServer interface {
	Send(*CardSet) error
	grpc.ServerStream
}

type cardSetsGetCardSetsServer struct {
	grpc.ServerStream
}

func (x *cardSetsGetCardSetsServer) Send(m *CardSet) error {
	return x.ServerStream.SendMsg(m)
}

func _CardSets_GetCardSetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCardSetIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardSetsServer).GetCardSetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cardsets.CardSets/GetCardSetById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardSetsServer).GetCardSetById(ctx, req.(*GetCardSetIn))
	}
	return interceptor(ctx, in, info, handler)
}

// CardSets_ServiceDesc is the grpc.ServiceDesc for CardSets service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CardSets_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cardsets.CardSets",
	HandlerType: (*CardSetsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCardSetById",
			Handler:    _CardSets_GetCardSetById_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetCardSets",
			Handler:       _CardSets_GetCardSets_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "service_cardsets/grpc/cardsets.proto",
}

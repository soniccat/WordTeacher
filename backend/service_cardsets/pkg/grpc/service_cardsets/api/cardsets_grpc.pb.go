//
//// required tools
//$ go install google.golang.org/protobuf/cmd/protoc-gen-go@v1.28
//$ go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@v1.2
//
//// generate source
//protoc --go_out=service_cardsets/pkg/grpc --go_opt=paths=source_relative \
//--go-grpc_out=service_cardsets/pkg/grpc --go-grpc_opt=paths=source_relative \
//service_cardsets/api/cardsets.proto
//
//// direct call for testing
//grpcurl -import-path ./service_cardsets/api -proto cardsets.proto -plaintext -format text -d 'sinceDate: "2006-01-02T15:04:05Z"' localhost:9090 cardsetsgrpc.CardSets.GetCardSets

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.24.2
// source: service_cardsets/api/cardsets.proto

package cardsetsgrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CardSets_GetCardSets_FullMethodName    = "/cardsetsgrpc.CardSets/GetCardSets"
	CardSets_GetCardSetById_FullMethodName = "/cardsetsgrpc.CardSets/GetCardSetById"
)

// CardSetsClient is the client API for CardSets service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CardSetsClient interface {
	GetCardSets(ctx context.Context, in *GetCardSetsIn, opts ...grpc.CallOption) (grpc.ServerStreamingClient[CardSet], error)
	GetCardSetById(ctx context.Context, in *GetCardSetIn, opts ...grpc.CallOption) (*GetCardSetOut, error)
}

type cardSetsClient struct {
	cc grpc.ClientConnInterface
}

func NewCardSetsClient(cc grpc.ClientConnInterface) CardSetsClient {
	return &cardSetsClient{cc}
}

func (c *cardSetsClient) GetCardSets(ctx context.Context, in *GetCardSetsIn, opts ...grpc.CallOption) (grpc.ServerStreamingClient[CardSet], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CardSets_ServiceDesc.Streams[0], CardSets_GetCardSets_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetCardSetsIn, CardSet]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CardSets_GetCardSetsClient = grpc.ServerStreamingClient[CardSet]

func (c *cardSetsClient) GetCardSetById(ctx context.Context, in *GetCardSetIn, opts ...grpc.CallOption) (*GetCardSetOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCardSetOut)
	err := c.cc.Invoke(ctx, CardSets_GetCardSetById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CardSetsServer is the server API for CardSets service.
// All implementations must embed UnimplementedCardSetsServer
// for forward compatibility.
type CardSetsServer interface {
	GetCardSets(*GetCardSetsIn, grpc.ServerStreamingServer[CardSet]) error
	GetCardSetById(context.Context, *GetCardSetIn) (*GetCardSetOut, error)
	mustEmbedUnimplementedCardSetsServer()
}

// UnimplementedCardSetsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCardSetsServer struct{}

func (UnimplementedCardSetsServer) GetCardSets(*GetCardSetsIn, grpc.ServerStreamingServer[CardSet]) error {
	return status.Errorf(codes.Unimplemented, "method GetCardSets not implemented")
}
func (UnimplementedCardSetsServer) GetCardSetById(context.Context, *GetCardSetIn) (*GetCardSetOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCardSetById not implemented")
}
func (UnimplementedCardSetsServer) mustEmbedUnimplementedCardSetsServer() {}
func (UnimplementedCardSetsServer) testEmbeddedByValue()                  {}

// UnsafeCardSetsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CardSetsServer will
// result in compilation errors.
type UnsafeCardSetsServer interface {
	mustEmbedUnimplementedCardSetsServer()
}

func RegisterCardSetsServer(s grpc.ServiceRegistrar, srv CardSetsServer) {
	// If the following call pancis, it indicates UnimplementedCardSetsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CardSets_ServiceDesc, srv)
}

func _CardSets_GetCardSets_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetCardSetsIn)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CardSetsServer).GetCardSets(m, &grpc.GenericServerStream[GetCardSetsIn, CardSet]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CardSets_GetCardSetsServer = grpc.ServerStreamingServer[CardSet]

func _CardSets_GetCardSetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCardSetIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardSetsServer).GetCardSetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardSets_GetCardSetById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardSetsServer).GetCardSetById(ctx, req.(*GetCardSetIn))
	}
	return interceptor(ctx, in, info, handler)
}

// CardSets_ServiceDesc is the grpc.ServiceDesc for CardSets service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CardSets_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cardsetsgrpc.CardSets",
	HandlerType: (*CardSetsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCardSetById",
			Handler:    _CardSets_GetCardSetById_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetCardSets",
			Handler:       _CardSets_GetCardSets_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "service_cardsets/api/cardsets.proto",
}

//
//// required tools
//$ go install google.golang.org/protobuf/cmd/protoc-gen-go@v1.28
//$ go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@v1.2
//
//// generate source
//protoc --go_out=service_cardsets/pkg/grpc --go_opt=paths=source_relative \
//--go-grpc_out=service_cardsets/pkg/grpc --go-grpc_opt=paths=source_relative \
//service_cardsets/api/cardsets.proto
//
//// direct call for testing
//grpcurl -import-path ./service_cardsets/api -proto cardsets.proto -plaintext -format text -d 'sinceDate: "2006-01-02T15:04:05Z"' localhost:9090 cardsetsgrpc.CardSets.GetCardSets

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v4.24.2
// source: service_cardsets/api/cardsets.proto

package cardsetsgrpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PartOfSpeech int32

const (
	PartOfSpeech_UNDEFINED    PartOfSpeech = 0
	PartOfSpeech_NOUN         PartOfSpeech = 1
	PartOfSpeech_VERB         PartOfSpeech = 2
	PartOfSpeech_ADJECTIVE    PartOfSpeech = 3
	PartOfSpeech_ADVERB       PartOfSpeech = 4
	PartOfSpeech_PRONOUN      PartOfSpeech = 5
	PartOfSpeech_PREPOSITION  PartOfSpeech = 6
	PartOfSpeech_CONJUNCTION  PartOfSpeech = 7
	PartOfSpeech_INTERJECTION PartOfSpeech = 8
	PartOfSpeech_ABBREVIATION PartOfSpeech = 9
	PartOfSpeech_EXCLAMATION  PartOfSpeech = 10
	PartOfSpeech_DETERMINER   PartOfSpeech = 11
	PartOfSpeech_PHRASALVERB  PartOfSpeech = 12
)

// Enum value maps for PartOfSpeech.
var (
	PartOfSpeech_name = map[int32]string{
		0:  "UNDEFINED",
		1:  "NOUN",
		2:  "VERB",
		3:  "ADJECTIVE",
		4:  "ADVERB",
		5:  "PRONOUN",
		6:  "PREPOSITION",
		7:  "CONJUNCTION",
		8:  "INTERJECTION",
		9:  "ABBREVIATION",
		10: "EXCLAMATION",
		11: "DETERMINER",
		12: "PHRASALVERB",
	}
	PartOfSpeech_value = map[string]int32{
		"UNDEFINED":    0,
		"NOUN":         1,
		"VERB":         2,
		"ADJECTIVE":    3,
		"ADVERB":       4,
		"PRONOUN":      5,
		"PREPOSITION":  6,
		"CONJUNCTION":  7,
		"INTERJECTION": 8,
		"ABBREVIATION": 9,
		"EXCLAMATION":  10,
		"DETERMINER":   11,
		"PHRASALVERB":  12,
	}
)

func (x PartOfSpeech) Enum() *PartOfSpeech {
	p := new(PartOfSpeech)
	*p = x
	return p
}

func (x PartOfSpeech) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PartOfSpeech) Descriptor() protoreflect.EnumDescriptor {
	return file_service_cardsets_api_cardsets_proto_enumTypes[0].Descriptor()
}

func (PartOfSpeech) Type() protoreflect.EnumType {
	return &file_service_cardsets_api_cardsets_proto_enumTypes[0]
}

func (x PartOfSpeech) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PartOfSpeech.Descriptor instead.
func (PartOfSpeech) EnumDescriptor() ([]byte, []int) {
	return file_service_cardsets_api_cardsets_proto_rawDescGZIP(), []int{0}
}

type GetCardSetsIn struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SinceDate     *string                `protobuf:"bytes,1,opt,name=sinceDate,proto3,oneof" json:"sinceDate,omitempty"`
	Limit         *int64                 `protobuf:"varint,2,opt,name=limit,proto3,oneof" json:"limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCardSetsIn) Reset() {
	*x = GetCardSetsIn{}
	mi := &file_service_cardsets_api_cardsets_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCardSetsIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCardSetsIn) ProtoMessage() {}

func (x *GetCardSetsIn) ProtoReflect() protoreflect.Message {
	mi := &file_service_cardsets_api_cardsets_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCardSetsIn.ProtoReflect.Descriptor instead.
func (*GetCardSetsIn) Descriptor() ([]byte, []int) {
	return file_service_cardsets_api_cardsets_proto_rawDescGZIP(), []int{0}
}

func (x *GetCardSetsIn) GetSinceDate() string {
	if x != nil && x.SinceDate != nil {
		return *x.SinceDate
	}
	return ""
}

func (x *GetCardSetsIn) GetLimit() int64 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

type GetCardSetIn struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCardSetIn) Reset() {
	*x = GetCardSetIn{}
	mi := &file_service_cardsets_api_cardsets_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCardSetIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCardSetIn) ProtoMessage() {}

func (x *GetCardSetIn) ProtoReflect() protoreflect.Message {
	mi := &file_service_cardsets_api_cardsets_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCardSetIn.ProtoReflect.Descriptor instead.
func (*GetCardSetIn) Descriptor() ([]byte, []int) {
	return file_service_cardsets_api_cardsets_proto_rawDescGZIP(), []int{1}
}

func (x *GetCardSetIn) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetCardSetOut struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CardSet       *CardSet               `protobuf:"bytes,1,opt,name=cardSet,proto3" json:"cardSet,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCardSetOut) Reset() {
	*x = GetCardSetOut{}
	mi := &file_service_cardsets_api_cardsets_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCardSetOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCardSetOut) ProtoMessage() {}

func (x *GetCardSetOut) ProtoReflect() protoreflect.Message {
	mi := &file_service_cardsets_api_cardsets_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCardSetOut.ProtoReflect.Descriptor instead.
func (*GetCardSetOut) Descriptor() ([]byte, []int) {
	return file_service_cardsets_api_cardsets_proto_rawDescGZIP(), []int{2}
}

func (x *GetCardSetOut) GetCardSet() *CardSet {
	if x != nil {
		return x.CardSet
	}
	return nil
}

type CardSet struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Id                  string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Tags                []string               `protobuf:"bytes,3,rep,name=tags,proto3" json:"tags,omitempty"`
	Cards               []*Card                `protobuf:"bytes,4,rep,name=cards,proto3" json:"cards,omitempty"`
	UserId              string                 `protobuf:"bytes,5,opt,name=userId,proto3" json:"userId,omitempty"`
	CreationDate        string                 `protobuf:"bytes,6,opt,name=creationDate,proto3" json:"creationDate,omitempty"`
	ModificationDate    string                 `protobuf:"bytes,7,opt,name=modificationDate,proto3" json:"modificationDate,omitempty"`
	Info                *CardSetInfo           `protobuf:"bytes,8,opt,name=info,proto3" json:"info,omitempty"`
	IsAvailableInSearch bool                   `protobuf:"varint,9,opt,name=isAvailableInSearch,proto3" json:"isAvailableInSearch,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *CardSet) Reset() {
	*x = CardSet{}
	mi := &file_service_cardsets_api_cardsets_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CardSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardSet) ProtoMessage() {}

func (x *CardSet) ProtoReflect() protoreflect.Message {
	mi := &file_service_cardsets_api_cardsets_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardSet.ProtoReflect.Descriptor instead.
func (*CardSet) Descriptor() ([]byte, []int) {
	return file_service_cardsets_api_cardsets_proto_rawDescGZIP(), []int{3}
}

func (x *CardSet) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CardSet) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CardSet) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *CardSet) GetCards() []*Card {
	if x != nil {
		return x.Cards
	}
	return nil
}

func (x *CardSet) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CardSet) GetCreationDate() string {
	if x != nil {
		return x.CreationDate
	}
	return ""
}

func (x *CardSet) GetModificationDate() string {
	if x != nil {
		return x.ModificationDate
	}
	return ""
}

func (x *CardSet) GetInfo() *CardSetInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *CardSet) GetIsAvailableInSearch() bool {
	if x != nil {
		return x.IsAvailableInSearch
	}
	return false
}

type CardSetInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Description   string                 `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	Source        *string                `protobuf:"bytes,2,opt,name=source,proto3,oneof" json:"source,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CardSetInfo) Reset() {
	*x = CardSetInfo{}
	mi := &file_service_cardsets_api_cardsets_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CardSetInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardSetInfo) ProtoMessage() {}

func (x *CardSetInfo) ProtoReflect() protoreflect.Message {
	mi := &file_service_cardsets_api_cardsets_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardSetInfo.ProtoReflect.Descriptor instead.
func (*CardSetInfo) Descriptor() ([]byte, []int) {
	return file_service_cardsets_api_cardsets_proto_rawDescGZIP(), []int{4}
}

func (x *CardSetInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CardSetInfo) GetSource() string {
	if x != nil && x.Source != nil {
		return *x.Source
	}
	return ""
}

type Card struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Id               string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Term             string                 `protobuf:"bytes,2,opt,name=term,proto3" json:"term,omitempty"`
	Transcription    *string                `protobuf:"bytes,3,opt,name=transcription,proto3,oneof" json:"transcription,omitempty"`
	PartOfSpeech     PartOfSpeech           `protobuf:"varint,4,opt,name=partOfSpeech,proto3,enum=cardsetsgrpc.PartOfSpeech" json:"partOfSpeech,omitempty"`
	Definitions      []string               `protobuf:"bytes,5,rep,name=definitions,proto3" json:"definitions,omitempty"`
	Synonyms         []string               `protobuf:"bytes,6,rep,name=synonyms,proto3" json:"synonyms,omitempty"`
	Examples         []string               `protobuf:"bytes,7,rep,name=examples,proto3" json:"examples,omitempty"`
	UserId           string                 `protobuf:"bytes,8,opt,name=userId,proto3" json:"userId,omitempty"`
	CreationDate     string                 `protobuf:"bytes,9,opt,name=creationDate,proto3" json:"creationDate,omitempty"`
	ModificationDate string                 `protobuf:"bytes,10,opt,name=modificationDate,proto3" json:"modificationDate,omitempty"`
	Labels           []string               `protobuf:"bytes,11,rep,name=labels,proto3" json:"labels,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Card) Reset() {
	*x = Card{}
	mi := &file_service_cardsets_api_cardsets_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Card) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Card) ProtoMessage() {}

func (x *Card) ProtoReflect() protoreflect.Message {
	mi := &file_service_cardsets_api_cardsets_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Card.ProtoReflect.Descriptor instead.
func (*Card) Descriptor() ([]byte, []int) {
	return file_service_cardsets_api_cardsets_proto_rawDescGZIP(), []int{5}
}

func (x *Card) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Card) GetTerm() string {
	if x != nil {
		return x.Term
	}
	return ""
}

func (x *Card) GetTranscription() string {
	if x != nil && x.Transcription != nil {
		return *x.Transcription
	}
	return ""
}

func (x *Card) GetPartOfSpeech() PartOfSpeech {
	if x != nil {
		return x.PartOfSpeech
	}
	return PartOfSpeech_UNDEFINED
}

func (x *Card) GetDefinitions() []string {
	if x != nil {
		return x.Definitions
	}
	return nil
}

func (x *Card) GetSynonyms() []string {
	if x != nil {
		return x.Synonyms
	}
	return nil
}

func (x *Card) GetExamples() []string {
	if x != nil {
		return x.Examples
	}
	return nil
}

func (x *Card) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Card) GetCreationDate() string {
	if x != nil {
		return x.CreationDate
	}
	return ""
}

func (x *Card) GetModificationDate() string {
	if x != nil {
		return x.ModificationDate
	}
	return ""
}

func (x *Card) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

var File_service_cardsets_api_cardsets_proto protoreflect.FileDescriptor

var file_service_cardsets_api_cardsets_proto_rawDesc = string([]byte{
	0x0a, 0x23, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x65,
	0x74, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x65, 0x74, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x63, 0x61, 0x72, 0x64, 0x73, 0x65, 0x74, 0x73, 0x67,
	0x72, 0x70, 0x63, 0x22, 0x65, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x43, 0x61, 0x72, 0x64, 0x53, 0x65,
	0x74, 0x73, 0x49, 0x6e, 0x12, 0x21, 0x0a, 0x09, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x73, 0x69, 0x6e, 0x63, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x88,
	0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x65,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x1e, 0x0a, 0x0c, 0x47, 0x65,
	0x74, 0x43, 0x61, 0x72, 0x64, 0x53, 0x65, 0x74, 0x49, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x40, 0x0a, 0x0d, 0x47, 0x65,
	0x74, 0x43, 0x61, 0x72, 0x64, 0x53, 0x65, 0x74, 0x4f, 0x75, 0x74, 0x12, 0x2f, 0x0a, 0x07, 0x63,
	0x61, 0x72, 0x64, 0x53, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63,
	0x61, 0x72, 0x64, 0x73, 0x65, 0x74, 0x73, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x61, 0x72, 0x64,
	0x53, 0x65, 0x74, 0x52, 0x07, 0x63, 0x61, 0x72, 0x64, 0x53, 0x65, 0x74, 0x22, 0xb4, 0x02, 0x0a,
	0x07, 0x43, 0x61, 0x72, 0x64, 0x53, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x12, 0x28, 0x0a, 0x05, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x73, 0x65, 0x74, 0x73, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43,
	0x61, 0x72, 0x64, 0x52, 0x05, 0x63, 0x61, 0x72, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61,
	0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x73, 0x65, 0x74, 0x73, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x43, 0x61, 0x72, 0x64, 0x53, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66,
	0x6f, 0x12, 0x30, 0x0a, 0x13, 0x69, 0x73, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x49, 0x6e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13,
	0x69, 0x73, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x22, 0x57, 0x0a, 0x0b, 0x43, 0x61, 0x72, 0x64, 0x53, 0x65, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x88, 0x01,
	0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x81, 0x03, 0x0a,
	0x04, 0x43, 0x61, 0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x12, 0x29, 0x0a, 0x0d, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x4f, 0x66, 0x53, 0x70,
	0x65, 0x65, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x63, 0x61, 0x72,
	0x64, 0x73, 0x65, 0x74, 0x73, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x4f, 0x66,
	0x53, 0x70, 0x65, 0x65, 0x63, 0x68, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x4f, 0x66, 0x53, 0x70,
	0x65, 0x65, 0x63, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x79, 0x6e, 0x6f, 0x6e, 0x79,
	0x6d, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x73, 0x79, 0x6e, 0x6f, 0x6e, 0x79,
	0x6d, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x2a, 0xd1, 0x01, 0x0a, 0x0c, 0x50, 0x61, 0x72, 0x74, 0x4f, 0x66, 0x53, 0x70, 0x65, 0x65, 0x63,
	0x68, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x55, 0x4e, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x56, 0x45,
	0x52, 0x42, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x44, 0x4a, 0x45, 0x43, 0x54, 0x49, 0x56,
	0x45, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x44, 0x56, 0x45, 0x52, 0x42, 0x10, 0x04, 0x12,
	0x0b, 0x0a, 0x07, 0x50, 0x52, 0x4f, 0x4e, 0x4f, 0x55, 0x4e, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b,
	0x50, 0x52, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x06, 0x12, 0x0f, 0x0a,
	0x0b, 0x43, 0x4f, 0x4e, 0x4a, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x07, 0x12, 0x10,
	0x0a, 0x0c, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4a, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x08,
	0x12, 0x10, 0x0a, 0x0c, 0x41, 0x42, 0x42, 0x52, 0x45, 0x56, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x09, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x58, 0x43, 0x4c, 0x41, 0x4d, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x0a, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x45, 0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e, 0x45,
	0x52, 0x10, 0x0b, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x48, 0x52, 0x41, 0x53, 0x41, 0x4c, 0x56, 0x45,
	0x52, 0x42, 0x10, 0x0c, 0x32, 0x9e, 0x01, 0x0a, 0x08, 0x43, 0x61, 0x72, 0x64, 0x53, 0x65, 0x74,
	0x73, 0x12, 0x45, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x43, 0x61, 0x72, 0x64, 0x53, 0x65, 0x74, 0x73,
	0x12, 0x1b, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x73, 0x65, 0x74, 0x73, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x61, 0x72, 0x64, 0x53, 0x65, 0x74, 0x73, 0x49, 0x6e, 0x1a, 0x15, 0x2e,
	0x63, 0x61, 0x72, 0x64, 0x73, 0x65, 0x74, 0x73, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x61, 0x72,
	0x64, 0x53, 0x65, 0x74, 0x22, 0x00, 0x30, 0x01, 0x12, 0x4b, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x43,
	0x61, 0x72, 0x64, 0x53, 0x65, 0x74, 0x42, 0x79, 0x49, 0x64, 0x12, 0x1a, 0x2e, 0x63, 0x61, 0x72,
	0x64, 0x73, 0x65, 0x74, 0x73, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x72,
	0x64, 0x53, 0x65, 0x74, 0x49, 0x6e, 0x1a, 0x1b, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x73, 0x65, 0x74,
	0x73, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x72, 0x64, 0x53, 0x65, 0x74,
	0x4f, 0x75, 0x74, 0x22, 0x00, 0x42, 0x43, 0x0a, 0x14, 0x69, 0x6f, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x63, 0x61, 0x72, 0x64, 0x73, 0x65, 0x74, 0x73, 0x67, 0x72, 0x70, 0x63, 0x42, 0x0d, 0x43,
	0x61, 0x72, 0x64, 0x53, 0x65, 0x74, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x1a,
	0x61, 0x67, 0x6c, 0x75, 0x73, 0x68, 0x6b, 0x6f, 0x76, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x61,
	0x72, 0x64, 0x73, 0x65, 0x74, 0x73, 0x67, 0x72, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
})

var (
	file_service_cardsets_api_cardsets_proto_rawDescOnce sync.Once
	file_service_cardsets_api_cardsets_proto_rawDescData []byte
)

func file_service_cardsets_api_cardsets_proto_rawDescGZIP() []byte {
	file_service_cardsets_api_cardsets_proto_rawDescOnce.Do(func() {
		file_service_cardsets_api_cardsets_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_service_cardsets_api_cardsets_proto_rawDesc), len(file_service_cardsets_api_cardsets_proto_rawDesc)))
	})
	return file_service_cardsets_api_cardsets_proto_rawDescData
}

var file_service_cardsets_api_cardsets_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_service_cardsets_api_cardsets_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_service_cardsets_api_cardsets_proto_goTypes = []any{
	(PartOfSpeech)(0),     // 0: cardsetsgrpc.PartOfSpeech
	(*GetCardSetsIn)(nil), // 1: cardsetsgrpc.GetCardSetsIn
	(*GetCardSetIn)(nil),  // 2: cardsetsgrpc.GetCardSetIn
	(*GetCardSetOut)(nil), // 3: cardsetsgrpc.GetCardSetOut
	(*CardSet)(nil),       // 4: cardsetsgrpc.CardSet
	(*CardSetInfo)(nil),   // 5: cardsetsgrpc.CardSetInfo
	(*Card)(nil),          // 6: cardsetsgrpc.Card
}
var file_service_cardsets_api_cardsets_proto_depIdxs = []int32{
	4, // 0: cardsetsgrpc.GetCardSetOut.cardSet:type_name -> cardsetsgrpc.CardSet
	6, // 1: cardsetsgrpc.CardSet.cards:type_name -> cardsetsgrpc.Card
	5, // 2: cardsetsgrpc.CardSet.info:type_name -> cardsetsgrpc.CardSetInfo
	0, // 3: cardsetsgrpc.Card.partOfSpeech:type_name -> cardsetsgrpc.PartOfSpeech
	1, // 4: cardsetsgrpc.CardSets.GetCardSets:input_type -> cardsetsgrpc.GetCardSetsIn
	2, // 5: cardsetsgrpc.CardSets.GetCardSetById:input_type -> cardsetsgrpc.GetCardSetIn
	4, // 6: cardsetsgrpc.CardSets.GetCardSets:output_type -> cardsetsgrpc.CardSet
	3, // 7: cardsetsgrpc.CardSets.GetCardSetById:output_type -> cardsetsgrpc.GetCardSetOut
	6, // [6:8] is the sub-list for method output_type
	4, // [4:6] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_service_cardsets_api_cardsets_proto_init() }
func file_service_cardsets_api_cardsets_proto_init() {
	if File_service_cardsets_api_cardsets_proto != nil {
		return
	}
	file_service_cardsets_api_cardsets_proto_msgTypes[0].OneofWrappers = []any{}
	file_service_cardsets_api_cardsets_proto_msgTypes[4].OneofWrappers = []any{}
	file_service_cardsets_api_cardsets_proto_msgTypes[5].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_service_cardsets_api_cardsets_proto_rawDesc), len(file_service_cardsets_api_cardsets_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_cardsets_api_cardsets_proto_goTypes,
		DependencyIndexes: file_service_cardsets_api_cardsets_proto_depIdxs,
		EnumInfos:         file_service_cardsets_api_cardsets_proto_enumTypes,
		MessageInfos:      file_service_cardsets_api_cardsets_proto_msgTypes,
	}.Build()
	File_service_cardsets_api_cardsets_proto = out.File
	file_service_cardsets_api_cardsets_proto_goTypes = nil
	file_service_cardsets_api_cardsets_proto_depIdxs = nil
}

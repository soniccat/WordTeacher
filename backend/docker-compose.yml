secrets:
  vkid:
    file: ./vkid
  google:
    file: ./google
  yandexid:
    file: ./yandexid

services:
  nginx:
    container_name: "apigateway${TEST_SUFFIX}"
    hostname: "apigateway"
    image: nginx:alpine
    volumes:
      - ./config/default.conf.template:/etc/nginx/templates/default.conf.template
      - '${VOLUME_NGINX_PATH}:/var/log/nginx'
      - ${VOLUME_CERTBOT_PATH}/www:/var/www/certbot/:ro
      - ${VOLUME_CERTBOT_PATH}/conf:/etc/nginx/ssl/:ro
      - ${VOLUME_WWW_PATH}:/www/:ro
    networks:
      mongo_net:
        ipv4_address: 172.16.0.12
    ports:
      - 80:80 # for certbot acme challenge
      - '${API_GATEWAY_PORT}:${API_GATEWAY_PORT}'
      - 443:443 # for files
    environment:
      - AUTH_PORT=${AUTH_PORT}
      - CARDSETS_PORT=${CARDSETS_PORT}
      - CARDSETSEARCH_PORT=${CARDSETSEARCH_PORT}
      - CARDSETS_GRPC_PORT=${CARDSETS_GRPC_PORT}
      - DICT_PORT=${DICT_PORT}
      - ARTICLES_PORT=${ARTICLES_PORT}
      - ARTICLES_GRPC_PORT=${ARTICLES_GRPC_PORT}
      - DASHBOARD_PORT=${DASHBOARD_PORT}
    restart: always

  certbot:
    container_name: "certbot${TEST_SUFFIX}"
    hostname: "certbot"
    image: certbot/certbot:latest
    volumes:
      - ${VOLUME_CERTBOT_PATH}/www/:/var/www/certbot/:rw
      - ${VOLUME_CERTBOT_PATH}/conf/:/etc/letsencrypt/:rw
    networks:
      mongo_net:
        ipv4_address: 172.16.0.20

  auth:
    container_name: "auth${TEST_SUFFIX}"
    hostname: "auth"
    build:
      context: ./
      dockerfile: ./Auth.Dockerfile
    image: "auth"
    command:
      - "-serverPort"
      - "${AUTH_PORT}"
      - "-mongoURI"
      - "mongodb://mongo:${MONGODB_PORT}/?replicaSet=rs0"
      - "-redisAddress"
      - "redis:${REDIS_PORT}"
    secrets:
      - vkid
      - google
      - yandexid
    volumes:
      - ${VOLUME_AUTH_LOG_PATH}:/var/log
    networks:
      mongo_net:
        ipv4_address: 172.16.0.10
    depends_on:
      - mongosetup
    # ports:
    #   - target: "${AUTH_PORT}"
    #     published: "${AUTH_PORT}"

  cardsets:
    container_name: "cardsets${TEST_SUFFIX}"
    hostname: "cardsets"
    build:
      context: ./
      args:
        PORT: "${CARDSETS_PORT}"
      dockerfile: ./CardSets.Dockerfile
    image: cardsets
    command:
      - "-serverPort"
      - "${CARDSETS_PORT}"
      - "-mongoURI"
      - "mongodb://mongo:${MONGODB_PORT}/?replicaSet=rs0"
      - "-redisAddress"
      - "redis:${REDIS_PORT}"
      - "-grpcPort"
      - "${CARDSETS_GRPC_PORT}"
    volumes:
      - ${VOLUME_CARDSETS_LOG_PATH}:/var/log
    networks:
      mongo_net:
        ipv4_address: 172.16.0.11
    depends_on:
      - mongosetup
    # ports:
    #   - target: "${CARDSETS_PORT}"
    #     published: "${CARDSETS_PORT}"

  cardsetsearch:
    container_name: "cardsetsearch${TEST_SUFFIX}"
    hostname: "cardsetsearch"
    build:
      context: ./
      args:
        PORT: "${CARDSETSEARCH_PORT}"
      dockerfile: ./CardSetSearch.Dockerfile
    image: cardsetsearch
    command:
      - "-serverPort"
      - "${CARDSETSEARCH_PORT}"
      - "-mongoURI"
      - "mongodb://mongo:${MONGODB_PORT}/?replicaSet=rs0"
      - "-redisAddress"
      - "redis:${REDIS_PORT}"
      - "-cardSetsGRPCAddress"
      - "apigateway:9091"
    volumes:
      - ${VOLUME_CARDSETSEARCH_LOG_PATH}:/var/log
    networks:
      mongo_net:
        ipv4_address: 172.16.0.13
    # ports:
    #   - target: "${CARDSETSEARCH_PORT}"
    #     published: "${CARDSETSEARCH_PORT}"
    depends_on:
      - cardsets

  dict:
    container_name: "dict${TEST_SUFFIX}"
    hostname: "dict"
    build:
      context: ./
      args:
        PORT: "${DICT_PORT}"
      dockerfile: ./Dict.Dockerfile
    image: dict
    command:
      - "-serverPort"
      - "${DICT_PORT}"
      - "-mongoURI"
      - "mongodb://mongo:${MONGODB_PORT}/?replicaSet=rs0"
      - "-redisAddress"
      - "redis:${REDIS_PORT}"
    volumes:
      - ${VOLUME_DICT_LOG_PATH}:/var/log
    networks:
      mongo_net:
        ipv4_address: 172.16.0.14
    depends_on:
      - mongosetup
    # ports:
    #   - target: "${DICT_PORT}"
    #     published: "${DICT_PORT}"

  articles:
    container_name: "articles${TEST_SUFFIX}"
    hostname: "articles"
    build:
      context: ./
      args:
        PORT: "${ARTICLES_PORT}"
      dockerfile: ./Articles.Dockerfile
    image: articles
    command:
      - "-serverPort"
      - "${ARTICLES_PORT}"
      - "-mongoURI"
      - "mongodb://mongo:${MONGODB_PORT}/?replicaSet=rs0"
    volumes:
      - ${VOLUME_ARTICLES_LOG_PATH}:/var/log
    networks:
      mongo_net:
        ipv4_address: 172.16.0.21
    depends_on:
      - mongosetup
    # ports:
    #   - target: "${ARTICLES_PORT}"
    #     published: "${ARTICLES_PORT}"

  dashboard:
    container_name: "dashboard${TEST_SUFFIX}"
    hostname: "dashboard"
    build:
      context: ./
      args:
        PORT: "${DASHBOARD_PORT}"
      dockerfile: ./Dashboard.Dockerfile
    image: dashboard
    command:
      - "-serverPort"
      - "${DASHBOARD_PORT}"
      - "-redisAddress"
      - "redis:${REDIS_PORT}"
      - "-articlesGRPCAddress"
      - "apigateway:9091"
    volumes:
      - ${VOLUME_DASHBOARD_LOG_PATH}:/var/log
    networks:
      mongo_net:
        ipv4_address: 172.16.0.22
    depends_on:
      - mongosetup
      - articles
    # ports:
      # - target: "${DASHBOARD_PORT}"
        # published: "${DASHBOARD_PORT}"

  redis:
    container_name: "redis${TEST_SUFFIX}"
    hostname: "redis"
    image: redis:6.2-alpine
    restart: always
    networks:
      mongo_net:
        ipv4_address: 172.16.0.3
    ports:
      - '${REDIS_PORT}:${REDIS_PORT}'
    command: redis-server --port ${REDIS_PORT}
    volumes:
      - ${VOLUME_REDIS}:/data

  mongo:
    container_name: "mongo${TEST_SUFFIX}"
    hostname: "mongo"
    image: mongo:5
    networks:
      mongo_net:
        ipv4_address: 172.16.0.1
    command: --replSet rs0 --port ${MONGODB_PORT} --bind_ip 127.0.0.1,172.16.0.1
    ports:
      - target: "${MONGODB_PORT}"
        published: "${MONGODB_PORT}"
    volumes:
      - ${VOLUME_MONGODB}:/data/db
      - ${VOLUME_MONGOCONFIG}:/data/configdb

  mongosetup:
    container_name: "mongo-setup${TEST_SUFFIX}"
    hostname: "mongosetup"
    image: mongo:5
    networks:
      mongo_net:
        ipv4_address: 172.16.0.2
    depends_on:
      - mongo
    restart: "no"
    entrypoint: [ "bash", "-c", "sleep 5 && mongo --host mongo:${MONGODB_PORT} --eval 'rs.initiate()'"]
    volumes:
      - /tmp/mongodatadb:/data/db
      - /tmp/mongodataconfigdb:/data/configdb

  mongo-exporter:
    container_name: "mongo-exporter${TEST_SUFFIX}"
    hostname: "mongo-exporter"
    image: percona/mongodb_exporter:0.40.0
    command:
      - '--mongodb.uri=mongodb://mongo:${MONGODB_PORT}'
      - '--collector.diagnosticdata'
      - '--collect-all'
      - '--compatible-mode'
      - '--collector.collstats'
      - '--discovering-mode'
    ports:
     - '9216:9216'
    networks:
      mongo_net:
        ipv4_address: 172.16.0.17
    # environment:
    #   - 'MONGODB_URI=mongodb://mongo:${MONGODB_PORT}'
    depends_on:
      - mongosetup

  grafana:
    image: grafana/grafana-enterprise
    container_name: grafana
    restart: unless-stopped
    hostname: "grafana"
    ports:
     - '3000:3000'
    networks:
      mongo_net:
        ipv4_address: 172.16.0.15
    volumes:
      - ${VOLUME_GRAFANA}:/var/lib/grafana

  prometheus:
    image: prom/prometheus #TODO: add v2.51.2
    container_name: prometheus
    hostname: "prometheus"
    command:
      - '--web.listen-address=:9191'
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - 9191:9191
    networks:
      mongo_net:
        ipv4_address: 172.16.0.16
    restart: unless-stopped
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - ${VOLUME_PROMETHEUS}:/prometheus

  loki:
    image: grafana/loki:3.0.0
    container_name: loki
    hostname: "loki"
    user: root
    volumes:
     - ./config/loki.yaml:/etc/config/loki.yaml
     - ${VOLUME_LOKI_PATH}:/var/lib/loki
    entrypoint:
     - /usr/bin/loki
     - -config.file=/etc/config/loki.yaml
    ports:
     - 3100:3100
    networks:
      mongo_net:
        ipv4_address: 172.16.0.18

  promtail:
    image: grafana/promtail:2.8.11
    container_name: promtail
    hostname: "promtail"
    user: root
    volumes:
      - /var/log/system.log:/var/log/root/system.log
      - ./config/promtail-local-config.yaml:/etc/config/promtail-local-config.yaml
      - ${VOLUME_NGINX_PATH}:/var/log/nginx
      - ${VOLUME_PROMTAIL_PATH}:/var/lib/promtail
      - ${VOLUME_AUTH_LOG_PATH}:/var/log/auth
      - ${VOLUME_CARDSETS_LOG_PATH}:/var/log/cardsets
      - ${VOLUME_CARDSETSEARCH_LOG_PATH}:/var/log/cardsetsearch
      - ${VOLUME_DICT_LOG_PATH}:/var/log/dict
      - ${VOLUME_ARTICLES_LOG_PATH}:/var/log/articles
    environment:
      - PROMTAIL_PORT=${PROMTAIL_PORT}
    entrypoint:
      - /usr/bin/promtail
      - -config.file=/etc/config/promtail-local-config.yaml
      - -config.expand-env=true
    ports:
      - ${PROMTAIL_PORT}:${PROMTAIL_PORT}
    networks:
      mongo_net:
        ipv4_address: 172.16.0.19

networks:
  mongo_net:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.16.0.0/24
          gateway: 172.16.0.254

volumes:
  redis:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: "${VOLUME_REDIS_PATH}"
  mongodb:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: "${VOLUME_MONGODB_PATH}"
  mongoconfig:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: "${VOLUME_MONGOCONFIG_PATH}"
  redis_test:
  mongodb_test:
  mongoconfig_test:
  grafana-storage:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: "${VOLUME_GRAFANA_PATH}"
  grafana-storage-test:
  prometheus-data:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: "${VOLUME_PROMETHEUS_PATH}"
  prometheus-data-test:

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.2
// source: service_articles/api/headlines.proto

package articlesgrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HeadlinesClient is the client API for Headlines service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HeadlinesClient interface {
	GetHeadlines(ctx context.Context, in *GetHeadlinesIn, opts ...grpc.CallOption) (Headlines_GetHeadlinesClient, error)
}

type headlinesClient struct {
	cc grpc.ClientConnInterface
}

func NewHeadlinesClient(cc grpc.ClientConnInterface) HeadlinesClient {
	return &headlinesClient{cc}
}

func (c *headlinesClient) GetHeadlines(ctx context.Context, in *GetHeadlinesIn, opts ...grpc.CallOption) (Headlines_GetHeadlinesClient, error) {
	stream, err := c.cc.NewStream(ctx, &Headlines_ServiceDesc.Streams[0], "/articlesgrpc.Headlines/GetHeadlines", opts...)
	if err != nil {
		return nil, err
	}
	x := &headlinesGetHeadlinesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Headlines_GetHeadlinesClient interface {
	Recv() (*Headline, error)
	grpc.ClientStream
}

type headlinesGetHeadlinesClient struct {
	grpc.ClientStream
}

func (x *headlinesGetHeadlinesClient) Recv() (*Headline, error) {
	m := new(Headline)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HeadlinesServer is the server API for Headlines service.
// All implementations must embed UnimplementedHeadlinesServer
// for forward compatibility
type HeadlinesServer interface {
	GetHeadlines(*GetHeadlinesIn, Headlines_GetHeadlinesServer) error
	mustEmbedUnimplementedHeadlinesServer()
}

// UnimplementedHeadlinesServer must be embedded to have forward compatible implementations.
type UnimplementedHeadlinesServer struct {
}

func (UnimplementedHeadlinesServer) GetHeadlines(*GetHeadlinesIn, Headlines_GetHeadlinesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetHeadlines not implemented")
}
func (UnimplementedHeadlinesServer) mustEmbedUnimplementedHeadlinesServer() {}

// UnsafeHeadlinesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HeadlinesServer will
// result in compilation errors.
type UnsafeHeadlinesServer interface {
	mustEmbedUnimplementedHeadlinesServer()
}

func RegisterHeadlinesServer(s grpc.ServiceRegistrar, srv HeadlinesServer) {
	s.RegisterService(&Headlines_ServiceDesc, srv)
}

func _Headlines_GetHeadlines_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetHeadlinesIn)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HeadlinesServer).GetHeadlines(m, &headlinesGetHeadlinesServer{stream})
}

type Headlines_GetHeadlinesServer interface {
	Send(*Headline) error
	grpc.ServerStream
}

type headlinesGetHeadlinesServer struct {
	grpc.ServerStream
}

func (x *headlinesGetHeadlinesServer) Send(m *Headline) error {
	return x.ServerStream.SendMsg(m)
}

// Headlines_ServiceDesc is the grpc.ServiceDesc for Headlines service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Headlines_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "articlesgrpc.Headlines",
	HandlerType: (*HeadlinesServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetHeadlines",
			Handler:       _Headlines_GetHeadlines_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "service_articles/api/headlines.proto",
}

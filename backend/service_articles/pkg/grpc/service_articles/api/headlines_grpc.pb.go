//
//// required tools
//$ go install google.golang.org/protobuf/cmd/protoc-gen-go@v1.28
//$ go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@v1.2
//
//// generate source
//protoc --go_out=service_articles/pkg/grpc --go_opt=paths=source_relative \
//--go-grpc_out=service_articles/pkg/grpc --go-grpc_opt=paths=source_relative \
//service_articles/api/headlines.proto

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.24.2
// source: service_articles/api/headlines.proto

package articlesgrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Headlines_GetHeadlines_FullMethodName = "/articlesgrpc.Headlines/GetHeadlines"
)

// HeadlinesClient is the client API for Headlines service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HeadlinesClient interface {
	GetHeadlines(ctx context.Context, in *GetHeadlinesIn, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Headline], error)
}

type headlinesClient struct {
	cc grpc.ClientConnInterface
}

func NewHeadlinesClient(cc grpc.ClientConnInterface) HeadlinesClient {
	return &headlinesClient{cc}
}

func (c *headlinesClient) GetHeadlines(ctx context.Context, in *GetHeadlinesIn, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Headline], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Headlines_ServiceDesc.Streams[0], Headlines_GetHeadlines_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetHeadlinesIn, Headline]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Headlines_GetHeadlinesClient = grpc.ServerStreamingClient[Headline]

// HeadlinesServer is the server API for Headlines service.
// All implementations must embed UnimplementedHeadlinesServer
// for forward compatibility.
type HeadlinesServer interface {
	GetHeadlines(*GetHeadlinesIn, grpc.ServerStreamingServer[Headline]) error
	mustEmbedUnimplementedHeadlinesServer()
}

// UnimplementedHeadlinesServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedHeadlinesServer struct{}

func (UnimplementedHeadlinesServer) GetHeadlines(*GetHeadlinesIn, grpc.ServerStreamingServer[Headline]) error {
	return status.Errorf(codes.Unimplemented, "method GetHeadlines not implemented")
}
func (UnimplementedHeadlinesServer) mustEmbedUnimplementedHeadlinesServer() {}
func (UnimplementedHeadlinesServer) testEmbeddedByValue()                   {}

// UnsafeHeadlinesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HeadlinesServer will
// result in compilation errors.
type UnsafeHeadlinesServer interface {
	mustEmbedUnimplementedHeadlinesServer()
}

func RegisterHeadlinesServer(s grpc.ServiceRegistrar, srv HeadlinesServer) {
	// If the following call pancis, it indicates UnimplementedHeadlinesServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Headlines_ServiceDesc, srv)
}

func _Headlines_GetHeadlines_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetHeadlinesIn)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HeadlinesServer).GetHeadlines(m, &grpc.GenericServerStream[GetHeadlinesIn, Headline]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Headlines_GetHeadlinesServer = grpc.ServerStreamingServer[Headline]

// Headlines_ServiceDesc is the grpc.ServiceDesc for Headlines service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Headlines_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "articlesgrpc.Headlines",
	HandlerType: (*HeadlinesServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetHeadlines",
			Handler:       _Headlines_GetHeadlines_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "service_articles/api/headlines.proto",
}
